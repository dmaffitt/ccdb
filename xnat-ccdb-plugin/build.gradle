/*
 * xnat-ccdb: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2019, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

import org.gradle.internal.jvm.Jvm

buildscript {
    ext {
        vXnat = '1.7.5.3'
    }
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath ("org.nrg.xnat.build:xnat-data-builder:1.7.5"){
            exclude group:'torque'
        }
        classpath ("org.nrg.xnat:web:${vXnat}"){
            exclude group: '*'
        }
    }
}

def groupName = 'org.nrg.xnat.plugins'
def pluginVersion = '1.0.0-SNAPSHOT'

group groupName
version pluginVersion

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'xnat-data-builder'

repositories {
    mavenLocal()
    maven {
        url "http://maven.imagej.net/content/groups/public"
        name "ImageJ Maven Repository"
    }
    maven {
        url 'http://dcm4che.org/maven2'
        name 'dcm4che Maven Repository'
    }
    jcenter()
    mavenCentral()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

// TODO: As of the 1.7.x release, XNAT is built as a Java 7-compatible (i.e. JDK 1.7) application. All plugins must be 1.7 compatible as well.
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

configurations {
    compile.extendsFrom(compileAndInclude)
}

task fatJar(type: Jar) {
    zip64 true
    classifier = "fat"
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

dependencies {
    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation("org.nrg.xdat:core") {
        transitive = false
    }
    implementation "org.nrg:prefs"
    implementation "org.nrg:framework"

    implementation("turbine:turbine") {
        transitive = false
    }
    implementation("org.apache.velocity:velocity") {
        transitive = false
    }
    implementation("stratum:stratum") {
        transitive = false
    }
    compileAndInclude 'com.opencsv:opencsv:4.6'
    compile group: 'org.springframework', name: 'spring-webmvc', version: '4.3.17.RELEASE'

    implementation "log4j:log4j"
    implementation "io.springfox:springfox-swagger2"

    testCompile "org.nrg:test"
    testCompile "junit:junit"
    testCompile "org.springframework:spring-test"
}

// TODO: If the compiler is Java 8 or later, this checks for a Java 7 version of the primary Java run-time library. Building with post-Java 7 libraries can result in occasional compatibility issues.
def javaVersion = Jvm.current().javaVersion
if (javaVersion.java8Compatible || javaVersion.java9Compatible) {
    if (hasProperty("rt.17.jar")) {
        // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
        // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
        def rt17jar = property "rt.17.jar"
        logger.info "Using ${rt17jar} as the bootstrap class path jar."
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.fork = true
                options.compilerArgs << "-XDignore.symbol.file"
                options.bootClasspath = rt17jar as String
            }
        }
    } else {
        logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
        logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
    }
}

// TODO: This configures the Jacoco test coverage plugin.
jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

// TODO: This tells the compiler where to find source code. This isn't required in a standard build, but the XNAT data builder generates code from XNAT data-type schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}
